#summary Guide to asserting expectations about types.
#labels Featured

* Asserting an interface *

{{{
        [Fact]
        public void type_definition()
        {
            Assert.True(new TypeExpectations<Interface1>()
                .IsInterface()
                .Result);
        }
}}}

* Asserting a value type *

{{{
        [Fact]
        public void type_definition()
        {
            Assert.True(new TypeExpectations<Struct1>()
                .IsValueType()
                .Implements<IFoo>()
                .IsDecoratedWith<CustomAttribute>()
                .Result);
        }
}}}

* Asserting an abstract class *

{{{
        [Fact]
        public void type_definition()
        {
            Assert.True(new TypeExpectations<Class1>()
                .DerivesFrom<object>()
                .IsAbstractBaseClass()
                .Implements<IFoo>()
                .IsDecoratedWith<CustomAttribute>()
                .Result);
        }
}}}

* Asserting a concrete class *

{{{
        [Fact]
        public void type_definition()
        {
            Assert.True(new TypeExpectations<Class1>()
                .DerivesFrom<object>()
                .IsConcreteClass()
                .IsUnsealed()
                .HasDefaultConstructor()
                .Implements<IFoo>()
                .IsDecoratedWith<CustomAttribute>()
                .Result);
        }
}}}

* Asserting a serializable class *

{{{
        [Fact]
        public void type_definition()
        {
            Assert.True(new TypeExpectations<Class1>()
                .DerivesFrom<object>()
                .IsConcreteClass()
                .IsUnsealed()
                .HasDefaultConstructor()
                .Serializable()
                .Result);
        }
}}}

* Asserting a class with custom XML serialization *

{{{
        [Fact]
        public void type_definition()
        {
            Assert.True(new TypeExpectations<Class1>()
                .DerivesFrom<object>()
                .IsConcreteClass()
                .IsUnsealed()
                .HasDefaultConstructor()
                .XmlRoot("root")
                .Implements<IXmlSerializable>()
                .Result);
        }
}}}